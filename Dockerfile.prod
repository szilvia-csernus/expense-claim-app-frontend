FROM node:alpine3.19 AS build
WORKDIR /app

COPY package.json .
COPY package-lock.json .
COPY vite.config.js .

# We don't use the --production flag because @vitejs/plugin-react is needed when running npm run build and @vitejs/plugin-react
# is listed under devDependencies. It's needed to build the app for production inside the Docker container.
# The final built application that runs in production will not include these development dependencies. 
RUN npm ci  

COPY src ./src
COPY public ./public
COPY index.html .

RUN npm run build


# NGINX web server
FROM nginx:1.25.3-alpine3.18-slim AS prod

COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80

# nginx recommends to add "-g daemon off;" to the CMD command so that nginx stays in the foreground. For more info:
# https://hub.docker.com/_/nginx
CMD ["nginx", "-g daemon off;"]


# build this image with the following command:
# docker build -f Dockerfile.prod -t expense-app-frontend:1.0.0-prod .

# run this container:
# docker container run -d --rm -it --name webP -p 5174:80 expense-app-frontend:1.0.0-prod
# -d              - detached mode
# --rm            - remove the container after it stopped running
# -it             - interactive terminal
# --name webP     - let's  name this container 'webP'
# -p 5174:80      - redirect the incoming requests for local port 5174 to our container's port 80, the default nginx port number.

# to stop the container:
# docker stop webP

# Note: This build is lightweight, ~12MB, there is no bash shell in this alpine version of nginx!